// import config from 'config';
// import nodemailer, { SendMailOptions } from 'nodemailer';
import sendGridMail, { MailDataRequired } from '@sendgrid/mail';

// Custom Dependencies
// import Log from '../logger';

// type Mail = {
//   to: string;
//   from: string;
//   subject: string;
//   template_id: string;
//   personalizations: [
//     {
//       dynamic_template_data: {
//         fullName: string;
//       };
//     }
//   ];
// };

export type Template = {
  to: string;
  from: string;
  subject: string;
  template_id: string;
  personalizations: [
    {
      dynamic_template_data: {
        fullName: string;
      };
    }
  ];
};

// const smtp = config?.get<{
//   user: string;
//   pass: string;
//   host: string;
//   port: number;
//   secure: boolean;
//   logSuccess?: boolean;
//   service?: string;
// }>('smtp');

// const { user, pass } = smtp;
// const transporter = nodemailer.createTransport({
//   ...smtp,
//   auth: { user, pass },
// });

// const sendEmail = async (payload: SendMailOptions) =>
//   new Promise<void>((resolve, reject) => {
//     Log.info('I will send and email from the mailer file');
//     Log.info(smtp.user);
//     transporter
//       .sendMail(payload)
//       .then((info) => {
//         // save the messageId , email , time and user in database

//         if (smtp.logSuccess)
//           Log.info(`Preview URL: ${nodemailer.getTestMessageUrl(info)}`);
//         resolve(info);
//       })
//       .catch((error) => {
//         Log.info(' shit happened when I tried to send and email');
//         Log.error(error);
//         reject(error);
//       });
//   });

sendGridMail.setApiKey('SG');

export function Emailer() {
  this.send = (
    msg: MailDataRequired[] | MailDataRequired,
    errCb?: Function
  ) => {
    sendGridMail.send(msg).catch((error: any) => {
      console.error(errCb);
      // eslint-disable-next-line eqeqeq
      if (typeof errCb == 'function') errCb(error);
    });
  };
  this.sendTemplate = (temp: MailDataRequired, errorFunc?: Function) => {
    const msg = temp;
    this.send(msg, errorFunc);
  };
}

// export default sendEmail;
