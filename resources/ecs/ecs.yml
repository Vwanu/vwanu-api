Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ${self:service}-${self:provider.stage}-cluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      ClusterSettings:
        - Name: containerInsights
          Value: disabled
      Tags:
        - Key: Name
          Value: ${self:service}-${self:provider.stage}-cluster
        - Key: Environment
          Value: ${self:provider.stage}

  # CloudWatch Log Group
  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/${self:service}-${self:provider.stage}
      RetentionInDays: 7
      Tags:
        - Key: Name
          Value: ${self:service}-${self:provider.stage}-logs
        - Key: Environment
          Value: ${self:provider.stage}

  # ECS Task Definition
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: ${self:service}-${self:provider.stage}-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: ${self:custom.config.ecs.cpu}
      Memory: ${self:custom.config.ecs.memory}
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: ${self:service}-${self:provider.stage}-container
          Image: ${param:dockerImage, '330795642424.dkr.ecr.us-east-1.amazonaws.com/vwanu-server:latest'}
          Essential: true
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: ${self:provider.region}
              awslogs-stream-prefix: ecs
          Environment:
            - Name: NODE_ENV
              Value: ${self:provider.stage}
            - Name: API_PORT
              Value: "3000"
            - Name: HOST
              Value: "0.0.0.0"
            - Name: DB_HOST
              Value: !GetAtt Database.Endpoint.Address
            - Name: DB_PORT
              Value: !GetAtt Database.Endpoint.Port
            - Name: DB_NAME
              Value: ${self:custom.config.database.name}
            - Name: S3_BUCKET
              Value: !Ref UserUploadsBucket
            - Name: COGNITO_USER_POOL_ID
              Value: !Ref CognitoUserPool
            - Name: COGNITO_CLIENT_ID
              Value: !Ref CognitoUserPoolClient
            - Name: REGION
              Value: ${self:provider.region}
          Secrets:
            - Name: DB_USERNAME
              ValueFrom: !Ref DatabaseUsernameParameter
            - Name: DB_PASSWORD
              ValueFrom: !Ref DatabasePasswordParameter
            - Name: JWT_SECRET
              ValueFrom: !Ref JWTSecretParameter
          HealthCheck:
            Command:
              - CMD-SHELL
              - "curl -f http://localhost:3000/health || exit 1"
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
      Tags:
        - Key: Name
          Value: ${self:service}-${self:provider.stage}-task
        - Key: Environment
          Value: ${self:provider.stage}

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ${self:service}-${self:provider.stage}-alb
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: ${self:service}-${self:provider.stage}-alb
        - Key: Environment
          Value: ${self:provider.stage}

  # Target Group
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: ${self:service}-${self:provider.stage}-tg
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200
      Tags:
        - Key: Name
          Value: ${self:service}-${self:provider.stage}-tg
        - Key: Environment
          Value: ${self:provider.stage}

  # ALB Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBListener
    Properties:
      ServiceName: ${self:service}-${self:provider.stage}-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: ${self:custom.config.ecs.desiredCount}
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      LoadBalancers:
        - ContainerName: ${self:service}-${self:provider.stage}-container
          ContainerPort: 3000
          TargetGroupArn: !Ref ALBTargetGroup
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      EnableExecuteCommand: true
      Tags:
        - Key: Name
          Value: ${self:service}-${self:provider.stage}-service
        - Key: Environment
          Value: ${self:provider.stage}

  # Auto Scaling Target (simplified)
  ECSAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 3
      MinCapacity: ${self:custom.config.ecs.desiredCount}
      ResourceId: !Sub service/${ECSCluster}/${ECSService.Name}
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/application-autoscaling-ecs-service
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  # Auto Scaling Policy (simplified)
  ECSAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ${self:service}-${self:provider.stage}-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0
        ScaleOutCooldown: 300
        ScaleInCooldown: 300