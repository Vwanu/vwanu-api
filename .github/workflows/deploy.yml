name: Deploy
run-name: Deploy to ${{ inputs.environment }} by @${{ github.actor }}
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - Development
          - Staging
          - Production

jobs:
  # test:
  #   uses: ./.github/workflows/test.yml
  #   secrets: inherit

  aws-deploy:
    #needs: test
    runs-on: ubuntu-22.04
    timeout-minutes: ${{ fromJSON(vars.DEFAULT_JOB_TIMEOUT) }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}
    steps:
      # - name: Slack Notification
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

      - name: Git Get Short SHA
        id: git_short_sha
        run: echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_OUTPUT

      - name: Set environment variable based on input
        id: set_env
        run: |
          case "${{ inputs.environment }}" in
            "Production")
              echo "STAGE=prod" >> $GITHUB_ENV
              ;;
            "Staging")
              echo "STAGE=staging" >> $GITHUB_ENV
              ;;
            "Development")
              echo "STAGE=dev" >> $GITHUB_ENV
              ;;
          esac

      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set Node.js 20.12.2
        uses: actions/setup-node@v4
        with:
          node-version: 20.12.2
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Cache npm registry
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        id: install-dependencies
        run: npm ci
        timeout-minutes: 10
        continue-on-error: true

      - name: Fallback to npm install if npm ci fails
        if: steps.install-dependencies.outcome == 'failure'
        run: npm install --no-audit --no-fund
        timeout-minutes: 10

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.ECR_REGISTRY }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # Build and push test app image
      - name: Build and push test app
        uses: docker/build-push-action@v6
        with:
          context: ./test-app
          platforms: linux/arm64
          file: ./test-app/Dockerfile
          push: true
          tags: '${{ vars.ECR_REGISTRY }}:test-app-latest'
          cache-from: type=gha,scope=test-app
          cache-to: type=gha,mode=max,scope=test-app

      # Build and push main app image
      # - name: Build main application
      #   uses: docker/build-push-action@v6
      #   with:
      #     platforms: linux/arm64
      #     file: ./Dockerfile.build
      #     push: true
      #     tags: '${{ vars.ECR_REGISTRY }}:${{ steps.git_short_sha.outputs.SHORT_SHA }}'
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max

      # Deploy to ECS

      - name: Deploy to ECS using Serverless Framework
        env:
          SENTRY_PROJECT: vwanu-api-backend
          SENTRY_ORG: webvitals
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_RELEASE: ${{ steps.git_short_sha.outputs.SHORT_SHA }}
          IMAGE_TAG: ${{ steps.git_short_sha.outputs.SHORT_SHA }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          npx serverless deploy --stage ${{ env.STAGE }} --param="imageTag=${{ env.IMAGE_TAG }}" --force

      - uses: 'marvinpinto/action-inject-ssm-secrets@v1.2.1'
        with:
          ssm_parameter: '/${{ env.STAGE }}/database/credentials'
          env_variable_name: 'DATABASE_CREDENTIALS'

      - name: Get RDS Endpoints
        run: |
          echo 'RDS_INSTANCE_ENDPOINTS<<EOF' >> $GITHUB_ENV
          echo $(aws rds describe-db-instances --db-instance-identifier vwanu-api-backend-$STAGE --query "DBInstances[*].Endpoint.Address" --output text) >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Set RDS Vars
        run: |
          echo "::add-mask::${{fromJson(env.DATABASE_CREDENTIALS).username}}"
          echo "::add-mask::${{fromJson(env.DATABASE_CREDENTIALS).password}}"
          echo "DB_HOST=${{ env.RDS_INSTANCE_ENDPOINTS }}" >> $GITHUB_ENV
          echo "DB_USERNAME=${{fromJson(env.DATABASE_CREDENTIALS).username}}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{fromJson(env.DATABASE_CREDENTIALS).password}}" >> $GITHUB_ENV

      - name: Migrate DB
        env:
          # The following are not used but need to be provided to instantiate the callService
          API_URL: 'https://localhost'
          SQS_CALL_QUEUE_URL: 'https://localhost'
          TWIML_APPLICATION_SID: 'DUMMY_SID'
        run: |
          npm run typeorm:migration:run
