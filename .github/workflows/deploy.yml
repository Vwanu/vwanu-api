name: Deploy
run-name: Deploy to ${{ inputs.environment }} by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - Development
          - Production

jobs:
  aws-deploy:
    runs-on: ubuntu-22.04
    timeout-minutes: ${{ vars.DEFAULT_JOB_TIMEOUT || 30 }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: 'us-east-1'
      AWS_DEFAULT_REGION: 'us-east-1'

    steps:
      - name: Git Get Short SHA
        id: git_short_sha
        run: echo "SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_OUTPUT

      - name: Set environment variable based on input
        id: set_env
        run: |
          case "${{ inputs.environment }}" in
            "Production")
              echo "STAGE=prod" >> $GITHUB_ENV
              ;;
            "Development")
              echo "STAGE=Development" >> $GITHUB_ENV
              ;;
          esac

      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set Node.js 20.12.2
        uses: actions/setup-node@v4
        with:
          node-version: 20.12.2
          cache: yarn
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: yarn

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: 058264272613.dkr.ecr.us-east-1.amazonaws.com
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          platforms: linux/arm64
          file: ./Dockerfile
          push: true
          tags: '058264272613.dkr.ecr.us-east-1.amazonaws.com/vwanu-api-backend:${{ steps.git_short_sha.outputs.SHORT_SHA }}'
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Get latest task definition
        id: get-task-def
        run: |
          TASK_DEF_JSON=$(aws ecs describe-task-definition \
            --task-definition ${{ secrets.TASK_DEFINITION }} \
            --query taskDefinition \
            --output json)
          echo "$TASK_DEF_JSON" > task-definition.json

      - name: Update task definition with new image
        run: |
          CONTAINER_NAME=my-container-name  # Replace with actual ECS container name
          NEW_IMAGE=${{ secrets.ECR_REPOSITORY }}:${{ steps.git_short_sha.outputs.SHORT_SHA }}

          # Inject new image
          jq --arg IMAGE "$NEW_IMAGE" --arg CONTAINER "$CONTAINER_NAME" \
            '(.containerDefinitions[] | select(.name == $CONTAINER) | .image) = $IMAGE' \
            task-definition.json > updated-task-definition.json

          # Fix cpu type if needed
          jq 'if .cpu | type == "number" then .cpu |= tostring else . end' \
            updated-task-definition.json > final-task-definition.json

          mv final-task-definition.json updated-task-definition.json

      - name: Register new task definition
        id: register-task-def
        run: |
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://updated-task-definition.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Deploy new task definition to ECS
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --task-definition $NEW_TASK_DEF_ARN