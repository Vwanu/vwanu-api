name: Deploy
run-name: Deploy to ${{ inputs.environment }} by @${{ github.actor }}
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - Development
          - Staging
          - Production

jobs:
  # test:
  #   uses: ./.github/workflows/test.yml
  #   secrets: inherit
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.build.outputs.image_tag }}
      full_image_uri: ${{ steps.build.outputs.full_image_uri }}
    steps:
      - name: Set environment variable based on input
        id: set_env
        run: |
          case "${{ inputs.environment }}" in
            "Production")
              echo "STAGE=prod" >> $GITHUB_ENV
              ;;
            "Staging")
              echo "STAGE=staging" >> $GITHUB_ENV
              ;;
            "Development")
              echo "STAGE=dev" >> $GITHUB_ENV
              ;;
          esac
      
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push to ECR
        id: build
        run: |
          # Use our dynamic tagging script
          bash docker-build-and-push.sh ${{ github.sha }}

          # Export image info for next steps
          source .image-tag
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "FULL_IMAGE_URI=$FULL_IMAGE_URI" >> $GITHUB_ENV

          # Set outputs for other jobs
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "full_image_uri=$FULL_IMAGE_URI" >> $GITHUB_OUTPUT

  aws-deploy:
    needs: build-and-push
    runs-on: ubuntu-22.04
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_DEFAULT_REGION: ${{ vars.AWS_REGION }}
    steps:
      - name: Set environment variable based on input
        id: set_env
        run: |
          case "${{ inputs.environment }}" in
            "Production")
              echo "STAGE=prod" >> $GITHUB_ENV
              echo "Deploying to Production environment"
              ;;
            "Staging")
              echo "STAGE=staging" >> $GITHUB_ENV
              ;;
            "Development")
              echo "STAGE=dev" >> $GITHUB_ENV
              ;;
          esac

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get Database Credentials from Parameter Store
        run: |
          echo "Getting database credentials from SSM Parameter Store..."
          
          # Get individual database parameters from Parameter Store
          DB_HOST=$(aws ssm get-parameter --name "/$STAGE/DB_HOST" --with-decryption --region ${{ vars.AWS_REGION }} --query 'Parameter.Value' --output text)
          DB_PORT=$(aws ssm get-parameter --name "/$STAGE/DB_PORT" --with-decryption --region ${{ vars.AWS_REGION }} --query 'Parameter.Value' --output text)
          DB_USER=$(aws ssm get-parameter --name "/$STAGE/DB_USER" --with-decryption --region ${{ vars.AWS_REGION }} --query 'Parameter.Value' --output text)
          DB_PASSWORD=$(aws ssm get-parameter --name "/$STAGE/DB_PASSWORD" --with-decryption --region ${{ vars.AWS_REGION }} --query 'Parameter.Value' --output text)
          # Database name is always "social_media" for all environments
          DB_DATABASE="social_media"
          
          # Mask sensitive values in logs
          echo "::add-mask::$DB_USER"
          echo "::add-mask::$DB_PASSWORD"
          
          # Set environment variables for Sequelize (matching config.js expectations)
          echo "DB_HOST=$DB_HOST" >> $GITHUB_ENV
          echo "DB_PORT=$DB_PORT" >> $GITHUB_ENV
          echo "DB_USER=$DB_USER" >> $GITHUB_ENV
          echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV
          echo "DB_DATABASE=$DB_DATABASE" >> $GITHUB_ENV
          
          echo "Database configuration loaded from Parameter Store"

      - name: Setup Node.js for migration
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Node.js dependencies for migration
        run: |
          echo "Installing dependencies for database migration..."
          npm ci
          
      - name: Run Database Migration
        env:
          NODE_ENV: ${{ env.STAGE == 'prod' && 'production' || env.STAGE == 'staging' && 'staging' || 'development' }}
        run: |
          echo "Running database migrations for $STAGE environment..."
          echo "Database: $DB_DATABASE"
          echo "Host: $DB_HOST"
          echo "Port: $DB_PORT"
          echo "User: $DB_USER"
          echo "Node Environment: $NODE_ENV"
          
          # Verify database connection first
          echo "Testing database connection..."
          npx sequelize-cli db:validate || echo "Warning: Database validation failed, proceeding with migration..."
          
          # Run migrations
          echo "Executing database migrations..."
          npm run migrate
          
          echo "Database migrations completed successfully!"

      - name: Deploy to ECS
        run: |
            # Set task definition, cluster, and service variables based on STAGE from $GITHUB_ENV
            if [ "$STAGE" == "staging" ]; then
              TASK_DEF_NAME="${{ vars.ECS_TASK_DEFINITION_STAGING }}"
              CLUSTER_NAME="${{ vars.ECS_CLUSTER_STAGING }}"
              SERVICE_NAME="${{ vars.ECS_SERVICE_STAGING }}"
            elif [ "$STAGE" == "prod" ]; then
              TASK_DEF_NAME="${{ vars.ECS_TASK_DEFINITION_PRODUCTION }}"
              CLUSTER_NAME="${{ vars.ECS_CLUSTER_PRODUCTION }}"
              SERVICE_NAME="${{ vars.ECS_SERVICE_PRODUCTION }}"
            elif [ "$STAGE" == "dev" ]; then
              TASK_DEF_NAME="${{ vars.ECS_TASK_DEFINITION_DEVELOPMENT }}"
              CLUSTER_NAME="${{ vars.ECS_CLUSTER_DEVELOPMENT }}"
              SERVICE_NAME="${{ vars.ECS_SERVICE_DEVELOPMENT }}"
            fi

            TASK_DEF=$(aws ecs describe-task-definition --task-definition "$TASK_DEF_NAME" --region ${{ vars.AWS_REGION }})
            
            # Get image URI from build step
            IMAGE_URI="${{ needs.build-and-push.outputs.FULL_IMAGE_URI }}"
            if [ -z "$IMAGE_URI" ]; then
              # Fallback to constructing from SHA
              SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-8)
              IMAGE_URI="${{ secrets.ECR_REPOSITORY }}:$SHORT_SHA"
            fi

            # Create new task definition with updated image
            echo "Creating new task definition with updated image: $IMAGE_URI"
            NEW_TASK_DEF=$(echo "$TASK_DEF" | jq --arg IMAGE "$IMAGE_URI" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
            
            # Register new task definition
            echo "Registering new task definition..."
            NEW_TASK_RESP=$(aws ecs register-task-definition --region ${{ vars.AWS_REGION }} --cli-input-json "$NEW_TASK_DEF")
            NEW_REVISION=$(echo "$NEW_TASK_RESP" | jq -r '.taskDefinition.family + ":" + (.taskDefinition.revision | tostring)')
            
            echo "New task definition registered: $NEW_REVISION"
            
            # Update service
            echo "Updating ECS service..."
            aws ecs update-service --cluster "$CLUSTER_NAME" --service "$SERVICE_NAME" --task-definition "$NEW_REVISION" --region ${{ vars.AWS_REGION }}
            
            # Wait for deployment to complete
            echo "Waiting for service to become stable..."
            aws ecs wait services-stable --cluster "$CLUSTER_NAME" --services "$SERVICE_NAME" --region ${{ vars.AWS_REGION }}
            
            echo "Deployment completed successfully!"
